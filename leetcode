class Node:
    def __init__(self, val):
        self.val = val
        self.next = None
        self.prev = None
class MyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
    def get(self, index: int) -> int:
        if index < 0 or index >= self.length:
            return -1
        i = 0
        curr = self.head
        while i != index:
            i += 1
            curr = curr.next if curr.next else -1
            if curr == -1:
                return curr
        return curr
    def addAtHead(self, val: int) -> None:
        new = Node(val)
        if self.length == 0:
            self.head = new
            self.tail = new
        else:
            new.next = self.head
            self.head.prev = new
            self.head = new
        self.length += 1
    def addAtTail(self, val: int) -> None:
        if self.length = 0:
            

    def addAtIndex(self, val: int) -> None:
        
    def deleteAtIndex(self, index: int) -> None:
